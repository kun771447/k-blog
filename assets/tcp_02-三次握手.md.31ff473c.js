import{_ as s,c as n,b as e,a as i,d as l,o as t}from"./app.670d56ee.js";const p="/k-blog/tcp/02/2023-02-11-14-59-51-image.png",c="/k-blog/tcp/02/2023-02-11-15-00-53-image.png",o="/k-blog/tcp/02/2023-02-11-15-01-51-image.png",r="/k-blog/tcp/02/2023-02-11-15-02-27-image.png",d="/k-blog/tcp/02/2023-02-11-15-50-18-image.png",h="/k-blog/tcp/02/2023-02-11-15-58-45-image.png",a="/k-blog/tcp/02/2023-02-11-16-21-10-image.png",_="/k-blog/tcp/02/2023-02-11-16-29-34-image.png",u="/k-blog/tcp/02/2023-02-11-16-42-18-image.png",v=JSON.parse('{"title":"三次握手","description":"","frontmatter":{"title":"三次握手","isTop":true,"tags":["TCP"]},"headers":[{"level":2,"title":"握手的目标","slug":"握手的目标","link":"#握手的目标","children":[{"level":3,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]}]},{"level":2,"title":"三次握手过程中的状态变迁","slug":"三次握手过程中的状态变迁","link":"#三次握手过程中的状态变迁","children":[{"level":3,"title":"三次握手流程","slug":"三次握手流程","link":"#三次握手流程","children":[]},{"level":3,"title":"netstat 命令查看 TCP 状态","slug":"netstat-命令查看-tcp-状态","link":"#netstat-命令查看-tcp-状态","children":[]},{"level":3,"title":"两端同时发送 SYN：双方使用固定源端口且同时建立连接","slug":"两端同时发送-syn-双方使用固定源端口且同时建立连接","link":"#两端同时发送-syn-双方使用固定源端口且同时建立连接","children":[]}]},{"level":2,"title":"三次握手的性能优化与安全问题","slug":"三次握手的性能优化与安全问题","link":"#三次握手的性能优化与安全问题","children":[{"level":3,"title":"服务器三次握手流程示例","slug":"服务器三次握手流程示例","link":"#服务器三次握手流程示例","children":[]},{"level":3,"title":"超时时间与缓冲队列","slug":"超时时间与缓冲队列","link":"#超时时间与缓冲队列","children":[]},{"level":3,"title":"Fast Open 降低时延","slug":"fast-open-降低时延","link":"#fast-open-降低时延","children":[]},{"level":3,"title":"Linux 上打开 TCP Fast Open","slug":"linux-上打开-tcp-fast-open","link":"#linux-上打开-tcp-fast-open","children":[]},{"level":3,"title":"如何应对 SYN 攻击","slug":"如何应对-syn-攻击","link":"#如何应对-syn-攻击","children":[]},{"level":3,"title":"tcp_syncookies","slug":"tcp-syncookies","link":"#tcp-syncookies","children":[]},{"level":3,"title":"TCP_DEFER_ACCEPT","slug":"tcp-defer-accept","link":"#tcp-defer-accept","children":[]}]}],"relativePath":"tcp/02-三次握手.md"}'),g={name:"tcp/02-三次握手.md"},C=i(`<h1 id="tcp-三次握手" tabindex="-1">TCP 三次握手 <a class="header-anchor" href="#tcp-三次握手" aria-hidden="true">#</a></h1><h2 id="握手的目标" tabindex="-1">握手的目标 <a class="header-anchor" href="#握手的目标" aria-hidden="true">#</a></h2><ul><li>同步 Sequence 序列号 <ul><li>初始序列号 ISN (Initial Sequence Number)</li></ul></li><li>交换 TCP 通讯参数 <ul><li>如 MSS、窗口比例因子、选择性确认、指定校验和算法</li></ul></li></ul><h3 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">tcpdump </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">i lo prot </span><span style="color:#F78C6C;">80</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">c </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">S</span></span>
<span class="line"></span></code></pre></div><ul><li><p>SYN：同步</p></li><li><p>ACK：确认</p></li></ul><img src="`+p+'">',7),m=l("h4",{id:"三次握手-1-syn-报文",tabindex:"-1"},[e("三次握手(1): SYN 报文 "),l("a",{class:"header-anchor",href:"#三次握手-1-syn-报文","aria-hidden":"true"},"#")],-1),y=l("img",{src:c},null,-1),k=i('<h4 id="三次握手-2-syn-ack-报文" tabindex="-1">三次握手(2): SYN/ACK 报文 <a class="header-anchor" href="#三次握手-2-syn-ack-报文" aria-hidden="true">#</a></h4><img src="'+o+'"><h4 id="三次握手-3-syn-ack-报文" tabindex="-1">三次握手(3): SYN/ACK 报文 <a class="header-anchor" href="#三次握手-3-syn-ack-报文" aria-hidden="true">#</a></h4><img src="'+r+'"><h2 id="三次握手过程中的状态变迁" tabindex="-1">三次握手过程中的状态变迁 <a class="header-anchor" href="#三次握手过程中的状态变迁" aria-hidden="true">#</a></h2><h3 id="三次握手流程" tabindex="-1">三次握手流程 <a class="header-anchor" href="#三次握手流程" aria-hidden="true">#</a></h3><img src="'+d+`"><ul><li><p>CLOSED</p></li><li><p>LISTEN</p></li><li><p>SYN-SENT</p></li><li><p>SYN-RECEIVED</p></li><li><p>ESTABLISHED</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// linux</span></span>
<span class="line"><span style="color:#A6ACCD;">netstat </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">anp </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> grep tcp</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// windows</span></span>
<span class="line"><span style="color:#A6ACCD;">netstat </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">anob</span></span>
<span class="line"></span></code></pre></div><h3 id="netstat-命令查看-tcp-状态" tabindex="-1">netstat 命令查看 TCP 状态 <a class="header-anchor" href="#netstat-命令查看-tcp-状态" aria-hidden="true">#</a></h3><ul><li><p>interval: 重新显示选定的统计信息，各个显示间暂停的间隔秒数。</p></li><li><p>-a: 显示所有连接和侦听端口。</p></li><li><p>-n: 以数字形式(如IP地址)显示地址和端口号。</p></li><li><p>-r: 显示路由表。</p></li><li><p>-s: 显示每个协议的统计信息。</p></li><li><p>-o(Windows): 显示拥有的与每个连接关联的进程ID。</p></li><li><p>-b(Windows)/ -p(Linux) : 显示对应的可执行程序名字。</p></li></ul><h3 id="两端同时发送-syn-双方使用固定源端口且同时建立连接" tabindex="-1">两端同时发送 SYN：双方使用固定源端口且同时建立连接 <a class="header-anchor" href="#两端同时发送-syn-双方使用固定源端口且同时建立连接" aria-hidden="true">#</a></h3><ul><li>TCB: Transmission Control Block, 保存连接使用的源端口、目的端口、目的ip、序号、应答序号、对方窗口大小、己方窗口大小、tcp 状态、tcp 输入/输出队列、应用层输出队列、tcp 的重传有关变量等</li></ul><img src="`+h+'"><h2 id="三次握手的性能优化与安全问题" tabindex="-1">三次握手的性能优化与安全问题 <a class="header-anchor" href="#三次握手的性能优化与安全问题" aria-hidden="true">#</a></h2><h3 id="服务器三次握手流程示例" tabindex="-1">服务器三次握手流程示例 <a class="header-anchor" href="#服务器三次握手流程示例" aria-hidden="true">#</a></h3><img src="'+a+'"><p>SYN 队列和 ACCEPT 队列</p><h3 id="超时时间与缓冲队列" tabindex="-1">超时时间与缓冲队列 <a class="header-anchor" href="#超时时间与缓冲队列" aria-hidden="true">#</a></h3><ul><li><p>应用层connect超时时间调整</p></li><li><p>操作系统内核限制调整</p><ul><li><p>服务器端SYN_ _RCV状态</p><ul><li><p>net.ipv4.tcp_ max_ syn. <em>backlog: SYN</em> _RCVD状态连接的最大个数，调整 SYN 队列的大小</p></li><li><p>net.ipv4.tcp_ <em>synack</em> retries: 被动建立连接时，发 SYN/ACK 的无响应的重试次数</p></li></ul></li><li><p>客户端SYN_ SENT状态</p><ul><li><p>net.ipv4.tcp_ <em>syn</em> retries = 6主动建立连接时，发 SYN 的无响应的重试次数</p></li><li><p>net.ipv4.ip_ local_ port_ range = 32768 60999建立连接时的本地端口可用范围</p></li></ul></li><li><p>ACCEPT 队列设置</p></li></ul></li></ul><h3 id="fast-open-降低时延" tabindex="-1">Fast Open 降低时延 <a class="header-anchor" href="#fast-open-降低时延" aria-hidden="true">#</a></h3><img src="'+_+'"><p>开启 Fast Open, 第一次建立连接时会将 Cookie 和 SYN、ACK 一起发送给客户端，在第二次建立连接时，客户端携带 Cookie(存储了上一次连接的相关信息) 就可以跳过三次握手</p><h3 id="linux-上打开-tcp-fast-open" tabindex="-1">Linux 上打开 TCP Fast Open <a class="header-anchor" href="#linux-上打开-tcp-fast-open" aria-hidden="true">#</a></h3><ul><li><p>net.ipv4.tcp_ fastopen: 系统开启TFO功能</p></li><li><p>0: 关闭</p></li><li><p>1: 作为客户端时可以使用TFO</p></li><li><p>2: 作为服务器时可以使用TFO</p></li><li><p>3: 无论作为客户端还是服务器，都可以使用TFO</p></li></ul><h3 id="如何应对-syn-攻击" tabindex="-1">如何应对 SYN 攻击 <a class="header-anchor" href="#如何应对-syn-攻击" aria-hidden="true">#</a></h3><p><strong>攻击者短时间伪造不同 IP 地址的 SYN 报文，快速沾满 backlog 队列是服务器不能为正常用户服务</strong></p><ul><li><p>net.core.netdev_ max_ backlog</p><ul><li>接收自网卡、但未被内核协议栈处理的报文队列长度</li></ul></li><li><p>net.ipv4.tcp_ max_ syn_ backlog</p><ul><li>SYN_ _RCVD状态连接的最大个数</li></ul></li><li><p>net.ipv4.tcp_ abort_ on_ _overflow</p><ul><li>超出处理能力时，对新来的SYN直接回包RST, 丟弃连接</li></ul></li></ul><h3 id="tcp-syncookies" tabindex="-1">tcp_syncookies <a class="header-anchor" href="#tcp-syncookies" aria-hidden="true">#</a></h3><img src="'+u+'"><ul><li><p>net.ipv4.tcp_ syncookies= 1</p><ul><li><p><strong>优点：</strong> 当SYN队列满后，新的SYN不进入队列，计算出cookie再以SYN+ACK中的序列号返回客户端，正常客户端发报文时，服务器根据报文中携带的cookie重新恢复连接</p></li><li><p><strong>缺点：</strong> 因为 TCP 报文头默认是 20 个字节，由于cookie占用序列号空间，导致此时所有TCP可选功能失效，例如扩充窗口、时间戳等</p></li></ul></li></ul><h3 id="tcp-defer-accept" tabindex="-1">TCP_DEFER_ACCEPT <a class="header-anchor" href="#tcp-defer-accept" aria-hidden="true">#</a></h3><img src="'+a+'"><p>在接收到 ACK，已经放到 ACCEPT 队列中后不去激活应用程序，直道我们实际接收到消息报文后再去激活应用程序，从而让应用程序效率更高，这个功能就是 TCP_DEFER_ACCEPT</p>',35);function b(S,T,A,f,D,x){return t(),n("div",null,[C,e(" ![](D:\\系统默认\\桌面\\code\\Project\\k-blog\\docs\\public\\tcp\\2023-02-11-14-59-51-image.png) "),m,y,e(" ![](D:\\系统默认\\桌面\\code\\Project\\k-blog\\docs\\public\\tcp\\2023-02-11-15-00-53-image.png) "),k])}const P=s(g,[["render",b]]);export{v as __pageData,P as default};
